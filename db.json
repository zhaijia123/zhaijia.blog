{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1672306455649},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"e3a119352418358f1778cddcef0ad0e39c7b3764","modified":1672306463743},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":499162500000},{"_id":"public/2022/12/29/hello-world/index.html","hash":"120a0edb7c67e80564310e49995be52c9111f66a","modified":1672306495327},{"_id":"public/archives/2022/index.html","hash":"edde8a604e4c2e5fb7e05063abec46fcea9604ad","modified":1672306495327},{"_id":"public/index.html","hash":"217d09112edebb14c11777b97e596075a6b9794c","modified":1672306495327},{"_id":"public/archives/2022/12/index.html","hash":"2dbd4d6c7d9ba16800b4b11d3289a592f49a8ec4","modified":1672306495327},{"_id":"public/archives/index.html","hash":"494aaed935515d3fdd4f0fc85a3a69a3d8b8b3cb","modified":1672306495327},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1672306495327},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1672306495327},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1672306495327},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1672306495327},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1672306495327},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1672306495327},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1672306495327},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1672306495327},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1672306495327},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1672306495327},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1672306495327},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1672306495327},{"_id":"source/_posts/log4js.md","hash":"11dd2480f57f26ba59a2e80232287f8a1fe3f538","modified":1672306562747}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2022-12-29T09:34:15.649Z","updated":"2022-12-29T09:34:15.649Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc8w3y7n00004ltl45fndm0c","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"log4js","date":"2022-12-29T09:35:17.000Z","_content":"\n## 1.安装\n\n`npm i log4js --save`\n\n## 2.基本使用\n\n```python\nconst Koa = require('koa')\nconst log4js = require('log4js') // 引入log4js\n\nconst app = new Koa()\nconst logger = log4js.getLogger() // 获得日志对象\n\nlogger.debug('我是debug级别的日志信息') // 使用日志对象\n\napp.listen(3000, () => {\n  console.log('listen 3000 ok');\n})\n```\n\n- **日志等级： trace 0  ,   debug   1  ,   info   2  ,   warn   3  ,   error   4  ,   fatal   5**\n\n## 3.进阶\n\n### 3.1 几个基本概念\n\n#### 3.1.1 Level\n\n这个理解起来不难，就是日志的分级。日志有了分级，log4js 才能更好地为我们展示日志（不同级别的日志在控制台中采用不同的颜色，比如 error 通常是红色的），在生产可以有选择的落盘日志，比如避免一些属于.debug才用的敏感信息被泄露出来。\n\nlog4js 的日志分为九个等级，各个级别的名字和权重如下：\n\n```python\n{\n  ALL: new Level(Number.MIN_VALUE, \"ALL\"),\n  TRACE: new Level(5000, \"TRACE\"),\n  DEBUG: new Level(10000, \"DEBUG\"),\n  INFO: new Level(20000, \"INFO\"),\n  WARN: new Level(30000, \"WARN\"),\n  ERROR: new Level(40000, \"ERROR\"),\n  FATAL: new Level(50000, \"FATAL\"),\n  MARK: new Level(9007199254740992, \"MARK\"), // 2^53\n  OFF: new Level(Number.MAX_VALUE, \"OFF\")\n}\n```\n\n![](https://pic1.zhimg.com/80/c6ef61e47e46f843f752a561bae450d0_1440w.webp)\n\nALL OFF 这两个等级并不会直接在业务代码中使用。剩下的七个即分别对应 Logger 实例的七个方法，.trace .debug .info ...。也就是说，你在调用这些方法的时候，就相当于为这些日志定了级。因此，之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - 我是debug级别的日志信息 中的 DEBUG 既是这条日志的级别。\n\n#### 3.1.2 类型\n\nlog4js 还有一个概念就是 category（类型），你可以设置一个 Logger 实例的类型，按照另外一个维度来区分日志：\n\n```python\n// file: set-catetory.js\nvar log4js = require('log4js');\nvar logger = log4js.getLogger('example');\nlogger.debug(\"Time:\", new Date());\n```\n\n在通过 getLogger 获取 Logger 实例时，唯一可以传的一个参数就是 loggerCategory（如'example'），通过这个参数来指定 Logger 实例属于哪个类别。这与 TJ 的 debug 是一样的：\n\n\n```python\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n在 debug 中 'worker'，同样也是为日志分类。好了，回来运行 node set-catetory.js：\n\n\n`[2016-08-21 01:16:00.212] [DEBUG] example - Time: 2016-08-20T17:16:00.212Z`\n\n与之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - Time: 2016-08-20T16:01:24.852Z 唯一不同的地方就在于，[default] 变成了 example。\n\n那类别有什么用呢，它比级别更为灵活，为日志了提供了第二个区分的维度，例如，你可以为每个文件设置不同的 category，比如在 set-catetory.js 中：\n\n```python\n// file: set-catetory.js\nvar log4js = require('log4js');\nvar logger = log4js.getLogger('set-catetory.js');\nlogger.debug(\"Time:\", new Date());\n```\n\n就可以从日志 [2016-08-21 01:24:07.332] [DEBUG] set-catetory.js - Time: 2016-08-20T17:24:07.331Z 看出，这条日志来自于 set-catetory.js 文件。又或者针对不同的 node package 使用不同的 category，这样可以区分日志来源于哪个模块。\n\n#### 3.1.3 Appender\n\n好了，现在日志有了级别和类别，解决了日志在入口处定级和分类问题，而在 log4js 中，日志的出口问题（即日志输出到哪里）就由 Appender 来解决。\n\n**默认 appender**\n\n下面是 log4js 内部默认的 appender 设置：\n\n```python\n// log4js.js\ndefaultConfig = {\n  appenders: [{\n    type: \"console\"\n  }]\n}\n```\n\n可以看到，在没有对 log4js 进行任何配置的时候，默认将日志都输出到了控制台。\n\n**设置自己的 appender**\n\n我们可以通过log4js.configure来设置我们想要的 appender。\n\n```python\n// file: custom-appender.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'file',\n    filename: 'default.log'\n  }]\n})\nvar logger = log4js.getLogger('custom-appender');\nlogger.debug(\"Time:\", new Date());\n```\n\n在上例中，我们将日志输出到了文件中，运行代码，log4js 在当前目录创建了一个名为default.log 文件，[2016-08-21 08:43:21.272] [DEBUG] custom-appender - Time: 2016-08-21T00:43:21.272Z 输出到了该文件中。\n\n**log4js 提供的 appender**\n\nConsole 和 File 都是 log4js 提供的 appender，除此之外还有：\n\n- DateFile：日志输出到文件，日志文件可以安特定的日期模式滚动，例如今天输出到 default-2016-08-21.log，明天输出到 default-2016-08-22.log；\n- SMTP：输出日志到邮件；\n- Mailgun：通过 Mailgun API 输出日志到 Mailgun；\n- levelFilter 可以通过 level 过滤；\n\n等等其他一些 appender，到这里可以看到全部的列表。\n\n![](https://pic2.zhimg.com/80/ecd0c36cabf34f9be4b9e62f2a36956d_1440w.webp)\n\n**过滤级别和类别**\n\n我们可以调整 appender 的配置，对日志的级别和类别进行过滤：\n\n```python\n// file: level-and-category.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'logLevelFilter',\n    level: 'DEBUG',\n    category: 'category1',\n    appender: {\n      type: 'file',\n      filename: 'default.log'\n    }\n  }]\n})\nvar logger1 = log4js.getLogger('category1');\nvar logger2 = log4js.getLogger('category2');\nlogger1.debug(\"Time:\", new Date());\nlogger1.trace(\"Time:\", new Date());\nlogger2.debug(\"Time:\", new Date());\n```\n\n运行，在 default.log 中增加了一条日志：\n\n`[2016-08-21 10:08:21.630] [DEBUG] category1 - Time: 2016-08-21T02:08:21.629Z`\n\n来看一下代码：\n\n使用 logLevelFilter 和 level 来对日志的级别进行过滤，所有权重大于或者等于DEBUG的日志将会输出。这也是之前提到的日志级别权重的意义；\n通过 category 来选择要输出日志的类别，category2 下面的日志被过滤掉了，该配置也接受一个数组，例如 ['category1', 'category2']，这样配置两个类别的日志都将输出到文件中。\n\n#### 3.1.4 Layout\n\nLayout 是 log4js 提供的高级功能，通过 layout 我们可以自定义每一条输出日志的格式。log4js 内置了四中类型的格式：\n\n- messagePassThrough：仅仅输出日志的内容；\n- basic：在日志的内容前面会加上时间、日志的级别和类别，通常日志的默认 layout；\n- colored/coloured：在 basic 的基础上给日志加上颜色，appender Console 默认使用的就是这个 layout；\n- pattern：这是一种特殊类型，可以通过它来定义任何你想要的格式。\n\n一个 pattern 的例子：\n\n```python\n// file: layout-pattern.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'console',\n    layout: {\n      type: 'pattern',\n      pattern: '[%r] [%[%5.5p%]] - %m%n'\n    }\n  }]\n})\nvar logger = log4js.getLogger('layout-pattern');\nlogger.debug(\"Time:\", new Date());\n```\n\n%r %p $m $n 是 log4js 内置的包含说明符，可以借此来输出一些 meta 的信息，更多细节，可以参考 log4js 的文档。\n\n一张图再来说明一下，Logger、Appender 和 Layout 的定位。\n\n![](https://pic4.zhimg.com/80/e481963c2a2136f4cad008c4645f6a9b_1440w.webp)\n\n### 3.2 实战 输出 Node 应用的 ACCESS 日志 access.log\n\n为了方便查问题，在生产环境中往往会记录应用请求进出的日志。那使用 log4js 怎么实现呢，直接上代码：\n\n```python\n// file: server.js\nvar log4js = require('log4js');\nvar express = require('express');\n\nlog4js.configure({\n appenders: [{\n   type: 'DateFile',\n   filename: 'access.log',\n   pattern: '-yyyy-MM-dd.log',\n   alwaysIncludePattern: true,\n   category: 'access'\n }]\n});\n\nvar app = express();\napp.use(log4js.connectLogger(log4js.getLogger('access'), { level: log4js.levels.INFO }));\napp.get('/', function(req,res) {\n  res.send('前端外刊评论');\n});\napp.listen(5000);\n```\n\n看看我们做了哪些事情：\n\n配置了一个 appender，从日志中选出类别为 access 的日志，输出到一个滚动的文件中；\n- log4js.getLogger('access') 获取一个类别为 access 的 Logger 实例，传递给log4js.connectLogger 中间件，这个中间件收集访问信息，通过这个实例打出。\n- 启动服务器，访问 http://localhost:5000，你会发现目录中多了一个名为 access.log-2016-08-21.log 的文件，里面有两条日志：\n\n\n```python\n[2016-08-21 14:34:04.752] [INFO] access - ::1 - - \"GET / HTTP/1.1\" 200 18 \"\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\"\n[2016-08-21 14:34:05.002] [INFO] access - ::1 - - \"GET /favicon.ico HTTP/1.1\" 404 24 \"http://localhost:5000/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\"\n```\n\n通过 log4js 日志的分类和appender功能，我们把访问日志输出到了一个滚动更新的文件之中。\n\n\n\n\n\n\n","source":"_posts/log4js.md","raw":"---\ntitle: log4js\ndate: 2022-12-29 17:35:17\ntags:\n---\n\n## 1.安装\n\n`npm i log4js --save`\n\n## 2.基本使用\n\n```python\nconst Koa = require('koa')\nconst log4js = require('log4js') // 引入log4js\n\nconst app = new Koa()\nconst logger = log4js.getLogger() // 获得日志对象\n\nlogger.debug('我是debug级别的日志信息') // 使用日志对象\n\napp.listen(3000, () => {\n  console.log('listen 3000 ok');\n})\n```\n\n- **日志等级： trace 0  ,   debug   1  ,   info   2  ,   warn   3  ,   error   4  ,   fatal   5**\n\n## 3.进阶\n\n### 3.1 几个基本概念\n\n#### 3.1.1 Level\n\n这个理解起来不难，就是日志的分级。日志有了分级，log4js 才能更好地为我们展示日志（不同级别的日志在控制台中采用不同的颜色，比如 error 通常是红色的），在生产可以有选择的落盘日志，比如避免一些属于.debug才用的敏感信息被泄露出来。\n\nlog4js 的日志分为九个等级，各个级别的名字和权重如下：\n\n```python\n{\n  ALL: new Level(Number.MIN_VALUE, \"ALL\"),\n  TRACE: new Level(5000, \"TRACE\"),\n  DEBUG: new Level(10000, \"DEBUG\"),\n  INFO: new Level(20000, \"INFO\"),\n  WARN: new Level(30000, \"WARN\"),\n  ERROR: new Level(40000, \"ERROR\"),\n  FATAL: new Level(50000, \"FATAL\"),\n  MARK: new Level(9007199254740992, \"MARK\"), // 2^53\n  OFF: new Level(Number.MAX_VALUE, \"OFF\")\n}\n```\n\n![](https://pic1.zhimg.com/80/c6ef61e47e46f843f752a561bae450d0_1440w.webp)\n\nALL OFF 这两个等级并不会直接在业务代码中使用。剩下的七个即分别对应 Logger 实例的七个方法，.trace .debug .info ...。也就是说，你在调用这些方法的时候，就相当于为这些日志定了级。因此，之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - 我是debug级别的日志信息 中的 DEBUG 既是这条日志的级别。\n\n#### 3.1.2 类型\n\nlog4js 还有一个概念就是 category（类型），你可以设置一个 Logger 实例的类型，按照另外一个维度来区分日志：\n\n```python\n// file: set-catetory.js\nvar log4js = require('log4js');\nvar logger = log4js.getLogger('example');\nlogger.debug(\"Time:\", new Date());\n```\n\n在通过 getLogger 获取 Logger 实例时，唯一可以传的一个参数就是 loggerCategory（如'example'），通过这个参数来指定 Logger 实例属于哪个类别。这与 TJ 的 debug 是一样的：\n\n\n```python\nvar debug = require('debug')('worker');\n\nsetInterval(function(){\n  debug('doing some work');\n}, 1000);\n```\n\n在 debug 中 'worker'，同样也是为日志分类。好了，回来运行 node set-catetory.js：\n\n\n`[2016-08-21 01:16:00.212] [DEBUG] example - Time: 2016-08-20T17:16:00.212Z`\n\n与之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - Time: 2016-08-20T16:01:24.852Z 唯一不同的地方就在于，[default] 变成了 example。\n\n那类别有什么用呢，它比级别更为灵活，为日志了提供了第二个区分的维度，例如，你可以为每个文件设置不同的 category，比如在 set-catetory.js 中：\n\n```python\n// file: set-catetory.js\nvar log4js = require('log4js');\nvar logger = log4js.getLogger('set-catetory.js');\nlogger.debug(\"Time:\", new Date());\n```\n\n就可以从日志 [2016-08-21 01:24:07.332] [DEBUG] set-catetory.js - Time: 2016-08-20T17:24:07.331Z 看出，这条日志来自于 set-catetory.js 文件。又或者针对不同的 node package 使用不同的 category，这样可以区分日志来源于哪个模块。\n\n#### 3.1.3 Appender\n\n好了，现在日志有了级别和类别，解决了日志在入口处定级和分类问题，而在 log4js 中，日志的出口问题（即日志输出到哪里）就由 Appender 来解决。\n\n**默认 appender**\n\n下面是 log4js 内部默认的 appender 设置：\n\n```python\n// log4js.js\ndefaultConfig = {\n  appenders: [{\n    type: \"console\"\n  }]\n}\n```\n\n可以看到，在没有对 log4js 进行任何配置的时候，默认将日志都输出到了控制台。\n\n**设置自己的 appender**\n\n我们可以通过log4js.configure来设置我们想要的 appender。\n\n```python\n// file: custom-appender.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'file',\n    filename: 'default.log'\n  }]\n})\nvar logger = log4js.getLogger('custom-appender');\nlogger.debug(\"Time:\", new Date());\n```\n\n在上例中，我们将日志输出到了文件中，运行代码，log4js 在当前目录创建了一个名为default.log 文件，[2016-08-21 08:43:21.272] [DEBUG] custom-appender - Time: 2016-08-21T00:43:21.272Z 输出到了该文件中。\n\n**log4js 提供的 appender**\n\nConsole 和 File 都是 log4js 提供的 appender，除此之外还有：\n\n- DateFile：日志输出到文件，日志文件可以安特定的日期模式滚动，例如今天输出到 default-2016-08-21.log，明天输出到 default-2016-08-22.log；\n- SMTP：输出日志到邮件；\n- Mailgun：通过 Mailgun API 输出日志到 Mailgun；\n- levelFilter 可以通过 level 过滤；\n\n等等其他一些 appender，到这里可以看到全部的列表。\n\n![](https://pic2.zhimg.com/80/ecd0c36cabf34f9be4b9e62f2a36956d_1440w.webp)\n\n**过滤级别和类别**\n\n我们可以调整 appender 的配置，对日志的级别和类别进行过滤：\n\n```python\n// file: level-and-category.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'logLevelFilter',\n    level: 'DEBUG',\n    category: 'category1',\n    appender: {\n      type: 'file',\n      filename: 'default.log'\n    }\n  }]\n})\nvar logger1 = log4js.getLogger('category1');\nvar logger2 = log4js.getLogger('category2');\nlogger1.debug(\"Time:\", new Date());\nlogger1.trace(\"Time:\", new Date());\nlogger2.debug(\"Time:\", new Date());\n```\n\n运行，在 default.log 中增加了一条日志：\n\n`[2016-08-21 10:08:21.630] [DEBUG] category1 - Time: 2016-08-21T02:08:21.629Z`\n\n来看一下代码：\n\n使用 logLevelFilter 和 level 来对日志的级别进行过滤，所有权重大于或者等于DEBUG的日志将会输出。这也是之前提到的日志级别权重的意义；\n通过 category 来选择要输出日志的类别，category2 下面的日志被过滤掉了，该配置也接受一个数组，例如 ['category1', 'category2']，这样配置两个类别的日志都将输出到文件中。\n\n#### 3.1.4 Layout\n\nLayout 是 log4js 提供的高级功能，通过 layout 我们可以自定义每一条输出日志的格式。log4js 内置了四中类型的格式：\n\n- messagePassThrough：仅仅输出日志的内容；\n- basic：在日志的内容前面会加上时间、日志的级别和类别，通常日志的默认 layout；\n- colored/coloured：在 basic 的基础上给日志加上颜色，appender Console 默认使用的就是这个 layout；\n- pattern：这是一种特殊类型，可以通过它来定义任何你想要的格式。\n\n一个 pattern 的例子：\n\n```python\n// file: layout-pattern.js\nvar log4js = require('log4js');\nlog4js.configure({\n  appenders: [{\n    type: 'console',\n    layout: {\n      type: 'pattern',\n      pattern: '[%r] [%[%5.5p%]] - %m%n'\n    }\n  }]\n})\nvar logger = log4js.getLogger('layout-pattern');\nlogger.debug(\"Time:\", new Date());\n```\n\n%r %p $m $n 是 log4js 内置的包含说明符，可以借此来输出一些 meta 的信息，更多细节，可以参考 log4js 的文档。\n\n一张图再来说明一下，Logger、Appender 和 Layout 的定位。\n\n![](https://pic4.zhimg.com/80/e481963c2a2136f4cad008c4645f6a9b_1440w.webp)\n\n### 3.2 实战 输出 Node 应用的 ACCESS 日志 access.log\n\n为了方便查问题，在生产环境中往往会记录应用请求进出的日志。那使用 log4js 怎么实现呢，直接上代码：\n\n```python\n// file: server.js\nvar log4js = require('log4js');\nvar express = require('express');\n\nlog4js.configure({\n appenders: [{\n   type: 'DateFile',\n   filename: 'access.log',\n   pattern: '-yyyy-MM-dd.log',\n   alwaysIncludePattern: true,\n   category: 'access'\n }]\n});\n\nvar app = express();\napp.use(log4js.connectLogger(log4js.getLogger('access'), { level: log4js.levels.INFO }));\napp.get('/', function(req,res) {\n  res.send('前端外刊评论');\n});\napp.listen(5000);\n```\n\n看看我们做了哪些事情：\n\n配置了一个 appender，从日志中选出类别为 access 的日志，输出到一个滚动的文件中；\n- log4js.getLogger('access') 获取一个类别为 access 的 Logger 实例，传递给log4js.connectLogger 中间件，这个中间件收集访问信息，通过这个实例打出。\n- 启动服务器，访问 http://localhost:5000，你会发现目录中多了一个名为 access.log-2016-08-21.log 的文件，里面有两条日志：\n\n\n```python\n[2016-08-21 14:34:04.752] [INFO] access - ::1 - - \"GET / HTTP/1.1\" 200 18 \"\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\"\n[2016-08-21 14:34:05.002] [INFO] access - ::1 - - \"GET /favicon.ico HTTP/1.1\" 404 24 \"http://localhost:5000/\" \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36\"\n```\n\n通过 log4js 日志的分类和appender功能，我们把访问日志输出到了一个滚动更新的文件之中。\n\n\n\n\n\n\n","slug":"log4js","published":1,"updated":"2022-12-29T09:36:23.940Z","_id":"clc8w4rab0000ajtl5634h1qf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h2><p><code>npm i log4js --save</code></p>\n<h2 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a>2.基本使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Koa = require(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\">const log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>) // 引入log4js</span><br><span class=\"line\"></span><br><span class=\"line\">const app = new Koa()</span><br><span class=\"line\">const logger = log4js.getLogger() // 获得日志对象</span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(<span class=\"string\">&#x27;我是debug级别的日志信息&#x27;</span>) // 使用日志对象</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt; &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">&#x27;listen 3000 ok&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>日志等级： trace 0  ,   debug   1  ,   info   2  ,   warn   3  ,   error   4  ,   fatal   5</strong></li>\n</ul>\n<h2 id=\"3-进阶\"><a href=\"#3-进阶\" class=\"headerlink\" title=\"3.进阶\"></a>3.进阶</h2><h3 id=\"3-1-几个基本概念\"><a href=\"#3-1-几个基本概念\" class=\"headerlink\" title=\"3.1 几个基本概念\"></a>3.1 几个基本概念</h3><h4 id=\"3-1-1-Level\"><a href=\"#3-1-1-Level\" class=\"headerlink\" title=\"3.1.1 Level\"></a>3.1.1 Level</h4><p>这个理解起来不难，就是日志的分级。日志有了分级，log4js 才能更好地为我们展示日志（不同级别的日志在控制台中采用不同的颜色，比如 error 通常是红色的），在生产可以有选择的落盘日志，比如避免一些属于.debug才用的敏感信息被泄露出来。</p>\n<p>log4js 的日志分为九个等级，各个级别的名字和权重如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ALL: new Level(Number.MIN_VALUE, <span class=\"string\">&quot;ALL&quot;</span>),</span><br><span class=\"line\">  TRACE: new Level(<span class=\"number\">5000</span>, <span class=\"string\">&quot;TRACE&quot;</span>),</span><br><span class=\"line\">  DEBUG: new Level(<span class=\"number\">10000</span>, <span class=\"string\">&quot;DEBUG&quot;</span>),</span><br><span class=\"line\">  INFO: new Level(<span class=\"number\">20000</span>, <span class=\"string\">&quot;INFO&quot;</span>),</span><br><span class=\"line\">  WARN: new Level(<span class=\"number\">30000</span>, <span class=\"string\">&quot;WARN&quot;</span>),</span><br><span class=\"line\">  ERROR: new Level(<span class=\"number\">40000</span>, <span class=\"string\">&quot;ERROR&quot;</span>),</span><br><span class=\"line\">  FATAL: new Level(<span class=\"number\">50000</span>, <span class=\"string\">&quot;FATAL&quot;</span>),</span><br><span class=\"line\">  MARK: new Level(<span class=\"number\">9007199254740992</span>, <span class=\"string\">&quot;MARK&quot;</span>), // <span class=\"number\">2</span>^<span class=\"number\">53</span></span><br><span class=\"line\">  OFF: new Level(Number.MAX_VALUE, <span class=\"string\">&quot;OFF&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/c6ef61e47e46f843f752a561bae450d0_1440w.webp\"></p>\n<p>ALL OFF 这两个等级并不会直接在业务代码中使用。剩下的七个即分别对应 Logger 实例的七个方法，.trace .debug .info …。也就是说，你在调用这些方法的时候，就相当于为这些日志定了级。因此，之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - 我是debug级别的日志信息 中的 DEBUG 既是这条日志的级别。</p>\n<h4 id=\"3-1-2-类型\"><a href=\"#3-1-2-类型\" class=\"headerlink\" title=\"3.1.2 类型\"></a>3.1.2 类型</h4><p>log4js 还有一个概念就是 category（类型），你可以设置一个 Logger 实例的类型，按照另外一个维度来区分日志：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: <span class=\"built_in\">set</span>-catetory.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;example&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>在通过 getLogger 获取 Logger 实例时，唯一可以传的一个参数就是 loggerCategory（如’example’），通过这个参数来指定 Logger 实例属于哪个类别。这与 TJ 的 debug 是一样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var debug = require(<span class=\"string\">&#x27;debug&#x27;</span>)(<span class=\"string\">&#x27;worker&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(function()&#123;</span><br><span class=\"line\">  debug(<span class=\"string\">&#x27;doing some work&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在 debug 中 ‘worker’，同样也是为日志分类。好了，回来运行 node set-catetory.js：</p>\n<p><code>[2016-08-21 01:16:00.212] [DEBUG] example - Time: 2016-08-20T17:16:00.212Z</code></p>\n<p>与之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - Time: 2016-08-20T16:01:24.852Z 唯一不同的地方就在于，[default] 变成了 example。</p>\n<p>那类别有什么用呢，它比级别更为灵活，为日志了提供了第二个区分的维度，例如，你可以为每个文件设置不同的 category，比如在 set-catetory.js 中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: <span class=\"built_in\">set</span>-catetory.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;set-catetory.js&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>就可以从日志 [2016-08-21 01:24:07.332] [DEBUG] set-catetory.js - Time: 2016-08-20T17:24:07.331Z 看出，这条日志来自于 set-catetory.js 文件。又或者针对不同的 node package 使用不同的 category，这样可以区分日志来源于哪个模块。</p>\n<h4 id=\"3-1-3-Appender\"><a href=\"#3-1-3-Appender\" class=\"headerlink\" title=\"3.1.3 Appender\"></a>3.1.3 Appender</h4><p>好了，现在日志有了级别和类别，解决了日志在入口处定级和分类问题，而在 log4js 中，日志的出口问题（即日志输出到哪里）就由 Appender 来解决。</p>\n<p><strong>默认 appender</strong></p>\n<p>下面是 log4js 内部默认的 appender 设置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// log4js.js</span><br><span class=\"line\">defaultConfig = &#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&quot;console&quot;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在没有对 log4js 进行任何配置的时候，默认将日志都输出到了控制台。</p>\n<p><strong>设置自己的 appender</strong></p>\n<p>我们可以通过log4js.configure来设置我们想要的 appender。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: custom-appender.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;file&#x27;</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;default.log&#x27;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;custom-appender&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>在上例中，我们将日志输出到了文件中，运行代码，log4js 在当前目录创建了一个名为default.log 文件，[2016-08-21 08:43:21.272] [DEBUG] custom-appender - Time: 2016-08-21T00:43:21.272Z 输出到了该文件中。</p>\n<p><strong>log4js 提供的 appender</strong></p>\n<p>Console 和 File 都是 log4js 提供的 appender，除此之外还有：</p>\n<ul>\n<li>DateFile：日志输出到文件，日志文件可以安特定的日期模式滚动，例如今天输出到 default-2016-08-21.log，明天输出到 default-2016-08-22.log；</li>\n<li>SMTP：输出日志到邮件；</li>\n<li>Mailgun：通过 Mailgun API 输出日志到 Mailgun；</li>\n<li>levelFilter 可以通过 level 过滤；</li>\n</ul>\n<p>等等其他一些 appender，到这里可以看到全部的列表。</p>\n<p><img src=\"https://pic2.zhimg.com/80/ecd0c36cabf34f9be4b9e62f2a36956d_1440w.webp\"></p>\n<p><strong>过滤级别和类别</strong></p>\n<p>我们可以调整 appender 的配置，对日志的级别和类别进行过滤：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: level-<span class=\"keyword\">and</span>-category.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;logLevelFilter&#x27;</span>,</span><br><span class=\"line\">    level: <span class=\"string\">&#x27;DEBUG&#x27;</span>,</span><br><span class=\"line\">    category: <span class=\"string\">&#x27;category1&#x27;</span>,</span><br><span class=\"line\">    appender: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;file&#x27;</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;default.log&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger1 = log4js.getLogger(<span class=\"string\">&#x27;category1&#x27;</span>);</span><br><span class=\"line\">var logger2 = log4js.getLogger(<span class=\"string\">&#x27;category2&#x27;</span>);</span><br><span class=\"line\">logger1.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br><span class=\"line\">logger1.trace(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br><span class=\"line\">logger2.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>运行，在 default.log 中增加了一条日志：</p>\n<p><code>[2016-08-21 10:08:21.630] [DEBUG] category1 - Time: 2016-08-21T02:08:21.629Z</code></p>\n<p>来看一下代码：</p>\n<p>使用 logLevelFilter 和 level 来对日志的级别进行过滤，所有权重大于或者等于DEBUG的日志将会输出。这也是之前提到的日志级别权重的意义；<br>通过 category 来选择要输出日志的类别，category2 下面的日志被过滤掉了，该配置也接受一个数组，例如 [‘category1’, ‘category2’]，这样配置两个类别的日志都将输出到文件中。</p>\n<h4 id=\"3-1-4-Layout\"><a href=\"#3-1-4-Layout\" class=\"headerlink\" title=\"3.1.4 Layout\"></a>3.1.4 Layout</h4><p>Layout 是 log4js 提供的高级功能，通过 layout 我们可以自定义每一条输出日志的格式。log4js 内置了四中类型的格式：</p>\n<ul>\n<li>messagePassThrough：仅仅输出日志的内容；</li>\n<li>basic：在日志的内容前面会加上时间、日志的级别和类别，通常日志的默认 layout；</li>\n<li>colored&#x2F;coloured：在 basic 的基础上给日志加上颜色，appender Console 默认使用的就是这个 layout；</li>\n<li>pattern：这是一种特殊类型，可以通过它来定义任何你想要的格式。</li>\n</ul>\n<p>一个 pattern 的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: layout-pattern.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;pattern&#x27;</span>,</span><br><span class=\"line\">      pattern: <span class=\"string\">&#x27;[%r] [%[%5.5p%]] - %m%n&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;layout-pattern&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>%r %p $m $n 是 log4js 内置的包含说明符，可以借此来输出一些 meta 的信息，更多细节，可以参考 log4js 的文档。</p>\n<p>一张图再来说明一下，Logger、Appender 和 Layout 的定位。</p>\n<p><img src=\"https://pic4.zhimg.com/80/e481963c2a2136f4cad008c4645f6a9b_1440w.webp\"></p>\n<h3 id=\"3-2-实战-输出-Node-应用的-ACCESS-日志-access-log\"><a href=\"#3-2-实战-输出-Node-应用的-ACCESS-日志-access-log\" class=\"headerlink\" title=\"3.2 实战 输出 Node 应用的 ACCESS 日志 access.log\"></a>3.2 实战 输出 Node 应用的 ACCESS 日志 access.log</h3><p>为了方便查问题，在生产环境中往往会记录应用请求进出的日志。那使用 log4js 怎么实现呢，直接上代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: server.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var express = require(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\"> appenders: [&#123;</span><br><span class=\"line\">   <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;DateFile&#x27;</span>,</span><br><span class=\"line\">   filename: <span class=\"string\">&#x27;access.log&#x27;</span>,</span><br><span class=\"line\">   pattern: <span class=\"string\">&#x27;-yyyy-MM-dd.log&#x27;</span>,</span><br><span class=\"line\">   alwaysIncludePattern: true,</span><br><span class=\"line\">   category: <span class=\"string\">&#x27;access&#x27;</span></span><br><span class=\"line\"> &#125;]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(log4js.connectLogger(log4js.getLogger(<span class=\"string\">&#x27;access&#x27;</span>), &#123; level: log4js.levels.INFO &#125;));</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, function(req,res) &#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">&#x27;前端外刊评论&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>看看我们做了哪些事情：</p>\n<p>配置了一个 appender，从日志中选出类别为 access 的日志，输出到一个滚动的文件中；</p>\n<ul>\n<li>log4js.getLogger(‘access’) 获取一个类别为 access 的 Logger 实例，传递给log4js.connectLogger 中间件，这个中间件收集访问信息，通过这个实例打出。</li>\n<li>启动服务器，访问 <a href=\"http://localhost:5000，你会发现目录中多了一个名为\">http://localhost:5000，你会发现目录中多了一个名为</a> access.log-2016-08-21.log 的文件，里面有两条日志：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2016</span>-08-<span class=\"number\">21</span> <span class=\"number\">14</span>:<span class=\"number\">34</span>:<span class=\"number\">04.752</span>] [INFO] access - ::<span class=\"number\">1</span> - - <span class=\"string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">18</span> <span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span></span><br><span class=\"line\">[<span class=\"number\">2016</span>-08-<span class=\"number\">21</span> <span class=\"number\">14</span>:<span class=\"number\">34</span>:<span class=\"number\">05.002</span>] [INFO] access - ::<span class=\"number\">1</span> - - <span class=\"string\">&quot;GET /favicon.ico HTTP/1.1&quot;</span> <span class=\"number\">404</span> <span class=\"number\">24</span> <span class=\"string\">&quot;http://localhost:5000/&quot;</span> <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 log4js 日志的分类和appender功能，我们把访问日志输出到了一个滚动更新的文件之中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h2><p><code>npm i log4js --save</code></p>\n<h2 id=\"2-基本使用\"><a href=\"#2-基本使用\" class=\"headerlink\" title=\"2.基本使用\"></a>2.基本使用</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Koa = require(<span class=\"string\">&#x27;koa&#x27;</span>)</span><br><span class=\"line\">const log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>) // 引入log4js</span><br><span class=\"line\"></span><br><span class=\"line\">const app = new Koa()</span><br><span class=\"line\">const logger = log4js.getLogger() // 获得日志对象</span><br><span class=\"line\"></span><br><span class=\"line\">logger.debug(<span class=\"string\">&#x27;我是debug级别的日志信息&#x27;</span>) // 使用日志对象</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, () =&gt; &#123;</span><br><span class=\"line\">  console.log(<span class=\"string\">&#x27;listen 3000 ok&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>日志等级： trace 0  ,   debug   1  ,   info   2  ,   warn   3  ,   error   4  ,   fatal   5</strong></li>\n</ul>\n<h2 id=\"3-进阶\"><a href=\"#3-进阶\" class=\"headerlink\" title=\"3.进阶\"></a>3.进阶</h2><h3 id=\"3-1-几个基本概念\"><a href=\"#3-1-几个基本概念\" class=\"headerlink\" title=\"3.1 几个基本概念\"></a>3.1 几个基本概念</h3><h4 id=\"3-1-1-Level\"><a href=\"#3-1-1-Level\" class=\"headerlink\" title=\"3.1.1 Level\"></a>3.1.1 Level</h4><p>这个理解起来不难，就是日志的分级。日志有了分级，log4js 才能更好地为我们展示日志（不同级别的日志在控制台中采用不同的颜色，比如 error 通常是红色的），在生产可以有选择的落盘日志，比如避免一些属于.debug才用的敏感信息被泄露出来。</p>\n<p>log4js 的日志分为九个等级，各个级别的名字和权重如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ALL: new Level(Number.MIN_VALUE, <span class=\"string\">&quot;ALL&quot;</span>),</span><br><span class=\"line\">  TRACE: new Level(<span class=\"number\">5000</span>, <span class=\"string\">&quot;TRACE&quot;</span>),</span><br><span class=\"line\">  DEBUG: new Level(<span class=\"number\">10000</span>, <span class=\"string\">&quot;DEBUG&quot;</span>),</span><br><span class=\"line\">  INFO: new Level(<span class=\"number\">20000</span>, <span class=\"string\">&quot;INFO&quot;</span>),</span><br><span class=\"line\">  WARN: new Level(<span class=\"number\">30000</span>, <span class=\"string\">&quot;WARN&quot;</span>),</span><br><span class=\"line\">  ERROR: new Level(<span class=\"number\">40000</span>, <span class=\"string\">&quot;ERROR&quot;</span>),</span><br><span class=\"line\">  FATAL: new Level(<span class=\"number\">50000</span>, <span class=\"string\">&quot;FATAL&quot;</span>),</span><br><span class=\"line\">  MARK: new Level(<span class=\"number\">9007199254740992</span>, <span class=\"string\">&quot;MARK&quot;</span>), // <span class=\"number\">2</span>^<span class=\"number\">53</span></span><br><span class=\"line\">  OFF: new Level(Number.MAX_VALUE, <span class=\"string\">&quot;OFF&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://pic1.zhimg.com/80/c6ef61e47e46f843f752a561bae450d0_1440w.webp\"></p>\n<p>ALL OFF 这两个等级并不会直接在业务代码中使用。剩下的七个即分别对应 Logger 实例的七个方法，.trace .debug .info …。也就是说，你在调用这些方法的时候，就相当于为这些日志定了级。因此，之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - 我是debug级别的日志信息 中的 DEBUG 既是这条日志的级别。</p>\n<h4 id=\"3-1-2-类型\"><a href=\"#3-1-2-类型\" class=\"headerlink\" title=\"3.1.2 类型\"></a>3.1.2 类型</h4><p>log4js 还有一个概念就是 category（类型），你可以设置一个 Logger 实例的类型，按照另外一个维度来区分日志：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: <span class=\"built_in\">set</span>-catetory.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;example&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>在通过 getLogger 获取 Logger 实例时，唯一可以传的一个参数就是 loggerCategory（如’example’），通过这个参数来指定 Logger 实例属于哪个类别。这与 TJ 的 debug 是一样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var debug = require(<span class=\"string\">&#x27;debug&#x27;</span>)(<span class=\"string\">&#x27;worker&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setInterval(function()&#123;</span><br><span class=\"line\">  debug(<span class=\"string\">&#x27;doing some work&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在 debug 中 ‘worker’，同样也是为日志分类。好了，回来运行 node set-catetory.js：</p>\n<p><code>[2016-08-21 01:16:00.212] [DEBUG] example - Time: 2016-08-20T17:16:00.212Z</code></p>\n<p>与之前的 [2016-08-21 00:01:24.852] [DEBUG] [default] - Time: 2016-08-20T16:01:24.852Z 唯一不同的地方就在于，[default] 变成了 example。</p>\n<p>那类别有什么用呢，它比级别更为灵活，为日志了提供了第二个区分的维度，例如，你可以为每个文件设置不同的 category，比如在 set-catetory.js 中：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: <span class=\"built_in\">set</span>-catetory.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;set-catetory.js&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>就可以从日志 [2016-08-21 01:24:07.332] [DEBUG] set-catetory.js - Time: 2016-08-20T17:24:07.331Z 看出，这条日志来自于 set-catetory.js 文件。又或者针对不同的 node package 使用不同的 category，这样可以区分日志来源于哪个模块。</p>\n<h4 id=\"3-1-3-Appender\"><a href=\"#3-1-3-Appender\" class=\"headerlink\" title=\"3.1.3 Appender\"></a>3.1.3 Appender</h4><p>好了，现在日志有了级别和类别，解决了日志在入口处定级和分类问题，而在 log4js 中，日志的出口问题（即日志输出到哪里）就由 Appender 来解决。</p>\n<p><strong>默认 appender</strong></p>\n<p>下面是 log4js 内部默认的 appender 设置：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// log4js.js</span><br><span class=\"line\">defaultConfig = &#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&quot;console&quot;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，在没有对 log4js 进行任何配置的时候，默认将日志都输出到了控制台。</p>\n<p><strong>设置自己的 appender</strong></p>\n<p>我们可以通过log4js.configure来设置我们想要的 appender。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: custom-appender.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;file&#x27;</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;default.log&#x27;</span></span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;custom-appender&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>在上例中，我们将日志输出到了文件中，运行代码，log4js 在当前目录创建了一个名为default.log 文件，[2016-08-21 08:43:21.272] [DEBUG] custom-appender - Time: 2016-08-21T00:43:21.272Z 输出到了该文件中。</p>\n<p><strong>log4js 提供的 appender</strong></p>\n<p>Console 和 File 都是 log4js 提供的 appender，除此之外还有：</p>\n<ul>\n<li>DateFile：日志输出到文件，日志文件可以安特定的日期模式滚动，例如今天输出到 default-2016-08-21.log，明天输出到 default-2016-08-22.log；</li>\n<li>SMTP：输出日志到邮件；</li>\n<li>Mailgun：通过 Mailgun API 输出日志到 Mailgun；</li>\n<li>levelFilter 可以通过 level 过滤；</li>\n</ul>\n<p>等等其他一些 appender，到这里可以看到全部的列表。</p>\n<p><img src=\"https://pic2.zhimg.com/80/ecd0c36cabf34f9be4b9e62f2a36956d_1440w.webp\"></p>\n<p><strong>过滤级别和类别</strong></p>\n<p>我们可以调整 appender 的配置，对日志的级别和类别进行过滤：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: level-<span class=\"keyword\">and</span>-category.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;logLevelFilter&#x27;</span>,</span><br><span class=\"line\">    level: <span class=\"string\">&#x27;DEBUG&#x27;</span>,</span><br><span class=\"line\">    category: <span class=\"string\">&#x27;category1&#x27;</span>,</span><br><span class=\"line\">    appender: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;file&#x27;</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">&#x27;default.log&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger1 = log4js.getLogger(<span class=\"string\">&#x27;category1&#x27;</span>);</span><br><span class=\"line\">var logger2 = log4js.getLogger(<span class=\"string\">&#x27;category2&#x27;</span>);</span><br><span class=\"line\">logger1.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br><span class=\"line\">logger1.trace(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br><span class=\"line\">logger2.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>运行，在 default.log 中增加了一条日志：</p>\n<p><code>[2016-08-21 10:08:21.630] [DEBUG] category1 - Time: 2016-08-21T02:08:21.629Z</code></p>\n<p>来看一下代码：</p>\n<p>使用 logLevelFilter 和 level 来对日志的级别进行过滤，所有权重大于或者等于DEBUG的日志将会输出。这也是之前提到的日志级别权重的意义；<br>通过 category 来选择要输出日志的类别，category2 下面的日志被过滤掉了，该配置也接受一个数组，例如 [‘category1’, ‘category2’]，这样配置两个类别的日志都将输出到文件中。</p>\n<h4 id=\"3-1-4-Layout\"><a href=\"#3-1-4-Layout\" class=\"headerlink\" title=\"3.1.4 Layout\"></a>3.1.4 Layout</h4><p>Layout 是 log4js 提供的高级功能，通过 layout 我们可以自定义每一条输出日志的格式。log4js 内置了四中类型的格式：</p>\n<ul>\n<li>messagePassThrough：仅仅输出日志的内容；</li>\n<li>basic：在日志的内容前面会加上时间、日志的级别和类别，通常日志的默认 layout；</li>\n<li>colored&#x2F;coloured：在 basic 的基础上给日志加上颜色，appender Console 默认使用的就是这个 layout；</li>\n<li>pattern：这是一种特殊类型，可以通过它来定义任何你想要的格式。</li>\n</ul>\n<p>一个 pattern 的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: layout-pattern.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\">  appenders: [&#123;</span><br><span class=\"line\">    <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;console&#x27;</span>,</span><br><span class=\"line\">    layout: &#123;</span><br><span class=\"line\">      <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;pattern&#x27;</span>,</span><br><span class=\"line\">      pattern: <span class=\"string\">&#x27;[%r] [%[%5.5p%]] - %m%n&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">var logger = log4js.getLogger(<span class=\"string\">&#x27;layout-pattern&#x27;</span>);</span><br><span class=\"line\">logger.debug(<span class=\"string\">&quot;Time:&quot;</span>, new Date());</span><br></pre></td></tr></table></figure>\n\n<p>%r %p $m $n 是 log4js 内置的包含说明符，可以借此来输出一些 meta 的信息，更多细节，可以参考 log4js 的文档。</p>\n<p>一张图再来说明一下，Logger、Appender 和 Layout 的定位。</p>\n<p><img src=\"https://pic4.zhimg.com/80/e481963c2a2136f4cad008c4645f6a9b_1440w.webp\"></p>\n<h3 id=\"3-2-实战-输出-Node-应用的-ACCESS-日志-access-log\"><a href=\"#3-2-实战-输出-Node-应用的-ACCESS-日志-access-log\" class=\"headerlink\" title=\"3.2 实战 输出 Node 应用的 ACCESS 日志 access.log\"></a>3.2 实战 输出 Node 应用的 ACCESS 日志 access.log</h3><p>为了方便查问题，在生产环境中往往会记录应用请求进出的日志。那使用 log4js 怎么实现呢，直接上代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// file: server.js</span><br><span class=\"line\">var log4js = require(<span class=\"string\">&#x27;log4js&#x27;</span>);</span><br><span class=\"line\">var express = require(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">log4js.configure(&#123;</span><br><span class=\"line\"> appenders: [&#123;</span><br><span class=\"line\">   <span class=\"built_in\">type</span>: <span class=\"string\">&#x27;DateFile&#x27;</span>,</span><br><span class=\"line\">   filename: <span class=\"string\">&#x27;access.log&#x27;</span>,</span><br><span class=\"line\">   pattern: <span class=\"string\">&#x27;-yyyy-MM-dd.log&#x27;</span>,</span><br><span class=\"line\">   alwaysIncludePattern: true,</span><br><span class=\"line\">   category: <span class=\"string\">&#x27;access&#x27;</span></span><br><span class=\"line\"> &#125;]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(log4js.connectLogger(log4js.getLogger(<span class=\"string\">&#x27;access&#x27;</span>), &#123; level: log4js.levels.INFO &#125;));</span><br><span class=\"line\">app.get(<span class=\"string\">&#x27;/&#x27;</span>, function(req,res) &#123;</span><br><span class=\"line\">  res.send(<span class=\"string\">&#x27;前端外刊评论&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.listen(<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>看看我们做了哪些事情：</p>\n<p>配置了一个 appender，从日志中选出类别为 access 的日志，输出到一个滚动的文件中；</p>\n<ul>\n<li>log4js.getLogger(‘access’) 获取一个类别为 access 的 Logger 实例，传递给log4js.connectLogger 中间件，这个中间件收集访问信息，通过这个实例打出。</li>\n<li>启动服务器，访问 <a href=\"http://localhost:5000，你会发现目录中多了一个名为\">http://localhost:5000，你会发现目录中多了一个名为</a> access.log-2016-08-21.log 的文件，里面有两条日志：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">2016</span>-08-<span class=\"number\">21</span> <span class=\"number\">14</span>:<span class=\"number\">34</span>:<span class=\"number\">04.752</span>] [INFO] access - ::<span class=\"number\">1</span> - - <span class=\"string\">&quot;GET / HTTP/1.1&quot;</span> <span class=\"number\">200</span> <span class=\"number\">18</span> <span class=\"string\">&quot;&quot;</span> <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span></span><br><span class=\"line\">[<span class=\"number\">2016</span>-08-<span class=\"number\">21</span> <span class=\"number\">14</span>:<span class=\"number\">34</span>:<span class=\"number\">05.002</span>] [INFO] access - ::<span class=\"number\">1</span> - - <span class=\"string\">&quot;GET /favicon.ico HTTP/1.1&quot;</span> <span class=\"number\">404</span> <span class=\"number\">24</span> <span class=\"string\">&quot;http://localhost:5000/&quot;</span> <span class=\"string\">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过 log4js 日志的分类和appender功能，我们把访问日志输出到了一个滚动更新的文件之中。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}